// Setup
void setup();

// Sensor reading
int sensorThresh = 56;
bool readR(); // Returns true if sensor is on black
bool readL();

// Motor control
void motorR(char power, bool dir = true);
void motorL(char power, bool dir = true);
void goStraight(char power, bool dir = true);
void turnR(char power);
void turnL(char power);

// Line following;
void followLine(char powerW, char powerB);
void followLineBack(char powerW, char powerB);

task main() {
    // Init of values
    int state = 0; // State for the state machine
    int counter1 = 0; // Counter value holder
    int commandI = 0; // Command iterator
    int commandS = 15; // Command size
    int commands[] = {2, 2, 5, 3, 2, 4, 2, 5, 4, 2, 4, 2, 4, 2, 5};
    //int commandS = 1; // Command size
    //int commands[] = {5};
    
    // Speed control
    int maxSpeed = 100; // 100
    int minSpeed = 20; // 30
    int maxSpeedBack = 30;
    int minSpeedBack = 27;
    
    // Extra control
    int turnCount = 100; // 70 or 0
    int forwardCount = 150; // 80
    int pushForwardCount = 630; // 600
    int goBackCount = 265; // 300
    
    // Commands
    // 2 = Follow line
    // 3 = Turn right
    // 4 = Turn left
    // 5 = Push can forward and go back
    
    while(true) {

        switch(state) {

                // Segment for setup
                case 0: // Setup state (Never go to this)
                        setup();
                        state = 1;
                        break;

                // Segment for processing commands
                case 1: // Command processor
                        goStraight(0); // Stop the motors
                        if (commandI < commandS) {
                            state = commands[commandI];
                            commandI++;
                        }
                        else {
                            //commandI = 0; // Repeat command set
                            Stop(true); // Stop when done with command set
                        }
                        break;

                // Segment for following a line
                case 2: // Follow line state
                        followLine(maxSpeed, minSpeed);
                        if (readR() && readL()) {
                            counter1 = forwardCount; // Used for the step
                            state = 21;
                        }
                        break;

                case 21: // Take small step forward
                        counter1 = counter1 - 1;
                        goStraight(maxSpeed);
                        if (counter1 < 1) {
                            state = 1;
                        }
                        break;
                        
                // Segment for turning right
                
                case 3: // Turn right init
                        turnR(maxSpeed);
                        state = 31;
                        counter1 = turnCount;
                        break;
                        
                case 31: // Turn a bit to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 32;
                        }
                        break;
                        
                case 32: // Turn right
                        turnR(maxSpeed);
                        if (readR()) {
                            counter1 = turnCount*2;
                            state = 33;
                        }
                        break;
                        
                case 33: // Turn a bit more to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 1;
                        }
                        break;
                        
                // Segment for turning left
                case 4: // Turn left init
                        turnL(maxSpeed);
                        state = 41;
                        counter1 = turnCount*2;
                        break;

                case 41: // Turn a bit to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 42;
                        }
                        break;

                case 42: // Turn L
                        turnL(maxSpeed);
                        if (readL()) {
                            counter1 = turnCount;
                            state = 43;
                        }
                        break;

                case 43: // Turn a bit more to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 1;
                        }
                        break;
                        
                // Segment for pushing can
                
                case 5: // Push init
                        state = 599;
                        counter1 = pushForwardCount;
                        break;
                
                case 599: // Go forward
                        //followLine(maxSpeed, minSpeed);
                        goStraight(maxSpeed);
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            counter1 = goBackCount;
                            state = 51;
                        }
                        break;

                case 51: // Backup a bit
                        counter1 = counter1 - 1;
                        goStraight(maxSpeed, false);
                        if (counter1 < 1) {
                            state = 521; // Turn around right
                            if (readR()) {
                                state = 522; // Turn around left
                            }
                        }
                        break;
                        
                case 521: // Turn around right
                        turnR(maxSpeed);
                        if (readR()) {
                            counter1 = turnCount*3;
                            state = 53;
                        }
                        break;
                        
                case 522: // Turn around left
                        turnL(maxSpeed);
                        if (readL()) {
                            counter1 = turnCount*3;
                            state = 53;
                        }
                        break;
                        
                case 53: // Turn a bit more to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 2; // reuse follow line
                        }
                        break;



                // Stopping state for debugging
                case 987: // Stop
                        goStraight(0);
                        break;

                default:
                        // Do this when state is not found
                        break;
        }
    }
}

void setup() {
    // Set sensorR to be light sensor
    SetSensor(S1, SENSOR_NXTLIGHT);
    
    // Set sensorL to be light sensor
    SetSensor(S2, SENSOR_NXTLIGHT);
}

void followLine(char powerW, char powerB) {

        // motorR
        if (readR()) {
            motorR(powerB);
        }
        else {
            motorR(powerW);
        }

        // motorL
        if (readL()) {
            motorL(powerB);
        }
        else {
            motorL(powerW);
        }
        
}

void followLineBack(char powerW, char powerB) {

        // motorR
        if (readR()) {
            motorR(powerB, false);
        }
        else {
            motorR(powerW, false);
        }

        // motorL
        if (readL()) {
            motorL(powerB, false);
        }
        else {
            motorL(powerW, false);
        }

}

void motorR(char power, bool dir) {

    // Clamping value
    if (power > 100)
        power = 100;

    if (power < 0)
        power = 0;

    // Setting motor speed
    if (power == 0)
        Off(OUT_A);
    else if (dir == false)
        OnRev(OUT_A, power);
    else
        OnFwd(OUT_A, power);
}

void motorL(char power, bool dir) {

    // Clamping value
    if (power > 100)
        power = 100;

    if (power < 0)
        power = 0;

    // Setting motor speed
    if (power == 0)
        Off(OUT_B);
    else if (dir == false)
        OnRev(OUT_B, power);
    else
        OnFwd(OUT_B, power);
}

void goStraight(char power, bool dir) {
    if (dir == true) {
        motorR(power);
        motorL(power);
    } else {
        motorR(power, false);
        motorL(power, false);
    }
    
}

void turnR(char power) {
    motorR(power, false);
    motorL(power);
}

void turnL(char power) {
    motorR(power);
    motorL(power, false);
}

bool readR() {
    int value = Sensor(S1);

    if (value > sensorThresh)
        return false;
    return true;
}

bool readL() {
    int value = Sensor(S2);

    if (value > sensorThresh)
        return false;
    return true;
}
