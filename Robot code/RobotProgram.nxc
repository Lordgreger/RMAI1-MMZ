// Setup
void setup();

// Sensor reading
bool readR(); // Returns true if sensor is on black
bool readL();

// Motor control
void motorR(char power, bool dir = true);
void motorL(char power, bool dir = true);
void goStraight(char power);
void turnR(char power);

// Line following;
void followLine(char powerW, char powerB);

task main() {
    // Values
    int state = 0;
    int counter1 = 0;
    int commands[] = {1, 2, 3};
    
    while(true) {

        switch(state) {

                case 0: // Setup state (Never go to this)
                        setup();
                        state = 2;
                        break;
                        
                case 1: // Command processor

                        break;

                case 2: // Follow line state
                        followLine(100, 20);
                        if (readR() && readL()) {
                            counter1 = 100; // Used for the step
                            state = 22;
                        }
                        break;

                case 22: // Take small step forward
                        counter1 = counter1 - 1;
                        goStraight(100);
                        if (counter1 < 1) {
                            state = 1;
                        }
                        break;
                        
                case 3: // Turn right
                        turnR(100);
                        if (readR()) {
                            counter1 = 500;
                            state = 33;
                        }
                        break;
                        
                case 33: // Turn a bit more to position better
                        counter1 = counter1 - 1;
                        if (counter1 < 1) {
                            state = 987;
                        }
                        break;

                case 987: // Stop
                        goStraight(0);
                        break;

                default:
                        // Do this when state is not found
                        break;
        }
    }
}

void setup() {
    // Set sensorR to be light sensor
    SetSensor(S1, SENSOR_LIGHT);
    
    // Set sensorL to be light sensor
    SetSensor(S2, SENSOR_LIGHT);
}

void followLine(char powerW, char powerB) {

        // motorR
        if (readR()) {
            motorR(powerB);
        }
        else {
            motorR(powerW);
        }

        // motorL
        if (readL()) {
            motorL(powerB);
        }
        else {
            motorL(powerW);
        }
        
}

void motorR(char power, bool dir) {

    // Clamping value
    if (power > 100)
        power = 100;

    if (power < 0)
        power = 0;

    // Setting motor speed
    if (power == 0)
        Off(OUT_A);
    else if (dir == false)
        OnRev(OUT_A, power);
    else
        OnFwd(OUT_A, power);
}

void motorL(char power, bool dir) {

    // Clamping value
    if (power > 100)
        power = 100;

    if (power < 0)
        power = 0;

    // Setting motor speed
    if (power == 0)
        Off(OUT_B);
    else if (dir == false)
        OnRev(OUT_B, power);
    else
        OnFwd(OUT_B, power);
}

void goStraight(char power) {
    motorR(power);
    motorL(power);
}

void turnR(char power) {
    motorR(power, false);
    motorL(power);
}

bool readR() {
    int value = Sensor(S1);

    if (value > 25)
        return false;
    return true;
}

bool readL() {
    int value = Sensor(S2);

    if (value > 25)
        return false;
    return true;
}
